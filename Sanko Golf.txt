Sanko Golf

### **Game Design Document (GDD): Cosmic Rollers**  
**Version 1.0**  

---

#### **1. Overview**  
**Vision**: A physics-driven, arcade-style golf game blending skill-based gameplay with blockchain-powered ownership and competition.  
**Platform**: Web (Three.js), Sanko L3 blockchain.  
**Target Audience**: Casual gamers, Web3 enthusiasts, competitive leaderboard chasers.  

---

#### **2. Gameplay**  
**Core Mechanics**:  
- **Roller Physics**: Momentum-based ball movement with wall-clinging, bouncing, and gravity manipulation.  
- **Power-Ups**:  
  - *Rocket Dash*: Burst forward with WASM-optimized impulse.  
  - *Sticky Mode*: Adjust friction coefficients mid-roll.  
  - *Gravity Flip*: Invert controls temporarily.  
- **Procedural Courses**:  
  - Generated via **Pyth Entropy RNG** (Perlin noise + prefab chunks).  
  - Daily modifiers (e.g., "Zero-G", "Bouncy").  

**Modes**:  
1. **Free-to-Play**:  
   - Earn NFTs by completing challenges (e.g., "5 hole-in-ones").  
2. **Arcade Mode**:  
   - Daily leaderboards with **DMT/Gold entry fees** (70% prize pool, 25% LP, 5% dev fee).  
3. **Multiplayer (2-4 Players)**:  
   - Turn-based wagering (DMT/Gold) with 60%/30% prizes, 3% dev fee, and 2% Gold burn.  

---

#### **3. Blockchain Integration**  
**Tokens**:  
- **DMT**: Gas token for arcade entries, LP rewards.  
- **Gold**: Premium currency for high-stakes matches, 10% burn on arcade entries.  

**NFTs (ERC-1155)**:  
- Cosmetic skins/trails with procedurally generated traits (Pyth RNG).  
- Traded on **SudoSwap** with 0% royalties.  

**Smart Contracts**:  
- `ArcadePool.sol`: Manages entry fees, prizes, and burns.  
- `Versus4Player.sol`: Handles multiplayer wagering and fee distribution.  
- `CosmeticNFT.sol`: Mints NFTs with IPFS metadata.  

---

#### **4. Art & Sound**  
**Visual Style**:  
- **Neon-Pastel Aesthetic**: Inspired by *Katamari Damacy* and *Lumines*.  
- **Dynamic Effects**: Particle explosions for trick shots, warp tunnels for gravity zones.  

**Audio**:  
- **Music**: Upbeat synthwave tracks.  
- **SFX**: Crisp sounds for collisions, power-ups, and UI interactions.  

---

#### **5. Technical Specs**  
**Engines/Tools**:  
- **Frontend**: Three.js (rendering), Rapier (physics), React (UI).  
- **Blockchain**: Sanko L3, Thirdweb (contracts), RainbowKit (wallet).  
- **RNG**: Pyth Entropy for course generation and NFT traits.  

**Hosting**: Fleek (IPFS), GitHub Pages.  

---

#### **6. Development Timeline**  
| **Phase**          | **Milestones**                              | **Timeline** |  
|---------------------|---------------------------------------------|--------------|  
| **Pre-Production**  | GDD finalization, repo setup                | Weeks 1-2    |  
| **Core Development**| Physics MVP, contract deployment            | Weeks 3-10   |  
| **Testing**         | Beta trials, contract audits                | Weeks 11-14  |  
| **Launch**          | Mainnet deployment, community events        | Week 15      |  
| **Post-Launch**     | Seasonal updates, cross-chain expansion     | Week 16+     |  

---

### **Test Plans**  

#### **1. Functional Testing**  
**Objective**: Validate core gameplay mechanics.  
**Test Cases**:  
- [ ] **Physics**: Roller adheres to walls, bounces off obstacles.  
- [ ] **Power-Ups**: Rocket Dash adds velocity; Sticky Mode reduces friction.  
- [ ] **Course Generation**: No unreachable holes; daily modifiers apply.  

---

#### **2. Blockchain Testing**  
**Objective**: Ensure secure, gas-efficient token/NFT interactions.  
**Test Cases**:  
- [ ] **Arcade Entry**: 50 DMT deducts 70% to prize pool, 25% to LP, 5% to dev.  
- [ ] **NFT Minting**: Completing "10 holes" challenge mints ERC-1155 token.  
- [ ] **Multiplayer Payouts**: 4-player Gold match burns 2%, awards 60%/30%.  

---

#### **3. Performance Testing**  
**Objective**: Optimize for smooth gameplay across devices.  
**Test Cases**:  
- [ ] **Load Testing**: 100 concurrent players on Sanko L3 testnet.  
- [ ] **Mobile**: Consistent 60 FPS on mid-tier smartphones.  
- [ ] **Network Latency**: Match resolution under 5s during peak congestion.  

---

#### **4. Security Testing**  
**Objective**: Prevent exploits in contracts and gameplay.  
**Test Cases**:  
- [ ] **Reentrancy Attacks**: `Versus4Player` resolves matches atomically.  
- [ ] **Overflow Checks**: ERC-20 transfers reject excessive amounts.  
- [ ] **RNG Manipulation**: Pyth Entropy seeds are immutable post-commit.  

---

#### **5. User Acceptance Testing (UAT)**  
**Objective**: Gather feedback from real players.  
**Test Cases**:  
- [ ] **Onboarding**: New players mint NFT within 10 minutes.  
- [ ] **Multiplayer UX**: 4-player match creation takes <2 minutes.  
- [ ] **Economy Balance**: Top 10% arcade winners earn 2x entry fee.  

---

#### **6. Risk Management**  
| **Risk**                  | **Mitigation**                              |  
|---------------------------|---------------------------------------------|  
| Smart contract exploit    | Thirdweb audit + 24/7 monitoring.           |  
| Low player retention      | Daily challenges + NFT airdrops.            |  
| Token volatility          | Dynamic burns + LP incentives.              |  

---

### **Test Result Log**  
| **Test Case**             | **Status** | **Notes**                          |  
|---------------------------|------------|------------------------------------|  
| Physics: Wall collision   | Pass       | Roller sticks as expected.         |  
| NFT mint on challenge     | Fail       | Metadata URI not updating.         |  
| Multiplayer payout        | Pass       | 60%/30% split verified.            |  

---

By adhering to this GDD and test plan, *Cosmic Rollers* will deliver a polished, secure, and engaging Web3 gaming experience. Adjustments can be made during beta testing based on player feedback.


——-

### **Cosmic Rollers: Code Architecture Overview**  
**Tech Stack**: Three.js (frontend), Rapier (physics), Sanko L3 (blockchain), Thirdweb (contracts), RainbowKit (wallets).  

---

## **1. Frontend Architecture**  
### **A. Core Modules**  
| **Module**          | **Purpose**                                  | **Tech**              |  
|---------------------|----------------------------------------------|-----------------------|  
| `GameEngine/`       | Physics, rendering, input handling           | Three.js, Rapier WASM |  
| `UI/`              | Menus, leaderboards, wallet integration      | React, RainbowKit     |  
| `Blockchain/`      | Contract interactions, NFT minting           | Thirdweb SDK          |  
| `Utils/`          | RNG helpers, physics sync, asset loading     | Custom scripts        |  

### **B. Key Files**  
```markdown
src/
├── App.jsx                  # Root component
├── GameEngine/
│   ├── PhysicsWorld.js      # Rapier physics setup
│   ├── RollerController.js  # Player movement/power-ups
│   └── CourseGenerator.js   # Pyth Entropy → Procedural courses
├── UI/
│   ├── WalletButton.js      # RainbowKit connector
│   ├── ArcadeModal.js       # Entry fee payment (DMT/Gold)
│   └── NFTRewardPopup.js    # Post-challenge minting
├── Blockchain/
│   ├── useArcadePool.js     # Hook for arcade entries
│   ├── useNFTMint.js        # ERC-1155 minting
│   └── useVersusMatch.js    # Multiplayer wagering
└── Utils/
    ├── rng.js               # Pyth Entropy wrapper
    └── physicsSync.js       # Deterministic multiplayer sync
```

---

## **2. Blockchain Architecture**  
### **A. Smart Contracts**  
| **Contract**           | **Purpose**                                  | **Key Functions**                     |  
|------------------------|----------------------------------------------|---------------------------------------|  
| `ArcadePool.sol`       | Arcade entry fees, prize pools, burns        | `enterWithDMT()`, `distributePrizes()`|  
| `Versus4Player.sol`    | 4-player wagering, dev fees, burns           | `createMatch()`, `resolveMatch()`     |  
| `CosmeticNFT.sol`      | ERC-1155 skins/traits                        | `mint()`, `uri()`                     |  

### **B. Contract Interactions**  
```javascript
// Example: Arcade Entry (Frontend → ArcadePool.sol)
import { useContract, useToken } from "@thirdweb-dev/react";

function enterArcade() {
  const { contract: arcadePool } = useContract("ARCADE_POOL_ADDRESS");
  const { mutate: transferDMT } = useToken(DMT_CONTRACT);
  
  transferDMT({
    to: arcadePool.address,
    amount: "50000000000000000000" // 50 DMT (18 decimals)
  });
}
```

---

## **3. Data Flow**  
### **A. Multiplayer Match Lifecycle**  
1. **Create Match**:  
   - Frontend calls `Versus4Player.createMatch(10 DMT, 4 players)`.  
   - Contract holds wagers until resolution.  
2. **Submit Scores**:  
   - Players submit scores via `submitScore(matchId, score)`.  
3. **Resolve Match**:  
   - Contract sorts scores, distributes prizes (60%/30%), burns 2% Gold.  

### **B. Arcade Mode Flow**  
```mermaid
sequenceDiagram
  Player->>ArcadePool: enterWithDMT(50 DMT)
  ArcadePool->>Camelot DEX: 25 DMT → LP
  ArcadePool->>PrizePool: 35 DMT → GOLD
  ArcadePool->>Dev: 2.5 DMT
  Note over PrizePool: Top 10% split daily
```

---

## **4. Critical Systems**  
### **A. Physics Sync (Multiplayer)**  
- **Deterministic Lockstep**:  
  - All players use same Pyth Entropy seed for course generation.  
  - Rapier WASM ensures identical physics across devices.  
- **WebRTC Fallback**:  
  - Peer-to-peer sync for real-time ghost ball rendering.  

### **B. NFT Minting**  
```javascript
// Free-to-Play Reward Flow
const { mutate: mintNFT } = useMintNFT(nftContract);

function completeChallenge() {
  mintNFT({
    to: playerAddress,
    metadata: {
      name: "Epic Trail",
      image: "ipfs://QmXYZ...",
      traits: { rarity: "Rare", color: "#FF00FF" }
    }
  });
}
```

---

## **5. Optimization Highlights**  
| **Area**           | **Strategy**                                | **Tool**          |  
|--------------------|---------------------------------------------|-------------------|  
| **Gas Fees**       | Batch NFT mints, immutable contract vars    | Thirdweb          |  
| **Rendering**      | Instanced meshes for obstacles              | Three.js          |  
| **Blockchain**     | Sanko L3’s low fees for microtransactions   | RainbowKit        |  

---

## **6. Dev-Ops & Deployment**  
### **A. CI/CD Pipeline**  
1. **Testnet**:  
   - `forge test` for contracts + Playwright for UI.  
2. **Mainnet**:  
   - Thirdweb dashboard for contract deployment.  
   - Fleek for IPFS frontend hosting.  

### **B. Monitoring**  
- **Contracts**: Thirdweb analytics for DMT/Gold flows.  
- **Player Metrics**: Custom Sanko L3 event dashboards (Dune Analytics).  

---

This architecture ensures **scalability**, **fairness** (via Pyth RNG), and **low-cost transactions** (Sanko L3). Let me know if you'd like deep dives into specific modules! 🚀


—-

### **In-Depth Overview of Gameplay Mechanics: Cosmic Rollers**  
**Core Vision**: A physics-driven, arcade-style golf game blending skill-based trick shots with blockchain-powered progression and competition.  

---

#### **1. Core Movement & Physics**  
- **Roller Mechanics**:  
  - **Momentum-Based Movement**: Players charge a shot by holding a button, adjusting angle/power via a trajectory line.  
  - **Physics Engine**: Rapier (WASM) simulates realistic collisions, slopes, and environmental forces (e.g., wind, gravity zones).  
  - **Wall-Clinging & Grinding**: Rollers stick to surfaces with high friction or grind on rails for strategic shortcuts.  
  - **Zero-Gravity Zones**: Invert movement controls temporarily, requiring players to adapt mid-shot.  

- **Shot Types**:  
  - **Standard Shot**: Basic charge-and-release for precision.  
  - **Bank Shots**: Ricochet off walls/obstacles to reach hidden paths.  
  - **Power Shots**: Overcharge for speed at the cost of accuracy.  

---

#### **2. Power-Ups & Abilities**  
- **In-Game Pickups**:  
  | **Power-Up**       | **Effect**                                  | **Duration** |  
  |--------------------|---------------------------------------------|--------------|  
  | **Rocket Dash**    | Burst forward in a straight line.           | 3 sec        |  
  | **Sticky Mode**    | Adhere to walls/ceilings for precise stops. | 5 sec        |  
  | **Bouncy Shield**  | Gain 2x rebound force from obstacles.       | 1 hole       |  
  | **Gravity Flip**   | Invert gravity for aerial maneuvers.        | 4 sec        |  

- **Activation**:  
  - Collected as glowing orbs mid-course.  
  - Manually triggered via hotkey (limited to 1 active at a time).  

---

#### **3. Procedural Course Generation**  
- **Algorithm**:  
  - **Hybrid System**: Combines Perlin noise for terrain with handcrafted prefabs (e.g., loops, teleporters).  
  - **Biomes**: Themed zones (e.g., neon city, asteroid field) with unique hazards (moving platforms, laser grids).  
  - **Daily Modifiers**: Global rules like "Double Bounce" or "Low Gravity" (selected via Pyth Entropy RNG).  

- **Difficulty Scaling**:  
  - **Early Courses**: Wide paths, minimal hazards.  
  - **Late Courses**: Narrow platforms, timed obstacles, enemy "Interrupters" that knock Rollers off course.  

---

#### **4. Game Modes**  
- **Free-to-Play**:  
  - **Challenges**: Complete objectives (e.g., "3 hole-in-ones") to earn Cosmetic NFTs.  
  - **Endless Mode**: Infinite courses with escalating difficulty.  

- **Arcade Mode**:  
  - **Daily Leaderboards**: Pay **50 DMT** or **10 Gold** to enter.  
  - **Prize Pool**: Top 10% split 70% of entries (converted to Gold).  
  - **LP Rewards**: 25% of DMT entries fund liquidity pools.  

- **Multiplayer (2-4 Players)**:  
  - **Turn-Based Wagering**: Players take turns, submitting scores on-chain.  
  - **Payouts**: 60% to 1st, 30% to 2nd, 3% dev fee, 2% Gold burn (if applicable).  
  - **Match Types**:  
    - **Speedrun**: Fastest time wins.  
    - **Hazard Golf**: Players place traps for opponents.  

---

#### **5. Blockchain Integration**  
- **Tokens**:  
  - **DMT**: Entry fees, LP rewards.  
  - **Gold**: Premium entries, burns (10% of arcade entries).  

- **NFTs (ERC-1155)**:  
  - **Cosmetic Traits**: Skins, trails, particle effects (rarity tiers: Common, Rare, Legendary).  
  - **Procedural Generation**: Traits assigned via Pyth Entropy (e.g., `entropy % 1000` for Legendary 0.1% drop).  
  - **Utility**: Equip to customize Rollers; tradeable on SudoSwap.  

---

#### **6. Economy & Progression**  
- **Player Progression**:  
  - **Skill-Based**: Lower stroke counts unlock harder courses.  
  - **NFT Rewards**: Rare skins grant +5% Gold earnings in Arcade Mode.  

- **Token Flows**:  
  | **Action**                | **DMT**          | **Gold**         |  
  |---------------------------|------------------|------------------|  
  | **Arcade Entry**          | 70% → Prize Pool | 10% burned       |  
  | **Multiplayer Wager**     | 3% dev fee       | 2% burned        |  
  | **NFT Trading**           | 0% royalties     | 5% burn on sales |  

---

#### **7. Multiplayer Fairness & Security**  
- **Deterministic Physics**: All players use the same Pyth Entropy seed for course generation.  
- **Anti-Cheat**:  
  - Scores validated via hash submissions (SHA-3 of inputs + RNG seed).  
  - Replay system stores shot trajectories for auditability.  

---

#### **8. Technical Challenges & Solutions**  
| **Challenge**              | **Solution**                              |  
|----------------------------|-------------------------------------------|  
| **Physics Sync**           | Rapier’s WASM lockstep simulation.        |  
| **On-Chain Score Storage** | Store stroke counts + hash in contracts.  |  
| **Mobile Optimization**    | Simplify meshes; cap FPS at 60.           |  

---

### **Conclusion**  
*Cosmic Rollers* merges skill-based arcade gameplay with blockchain innovation, offering:  
- **Dynamic Physics**: Strategic shots and power-ups.  
- **Endless Variety**: Procedural courses + daily challenges.  
- **Player Ownership**: NFTs and tokenized rewards.  
- **Fair Competition**: Transparent on-chain scoring and burns.  

This design ensures accessibility for casual players while rewarding mastery and strategic blockchain engagement. 🚀