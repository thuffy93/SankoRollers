---
description: 
globs: 
alwaysApply: true
---
# Three.js Vector Operations

- **Always Clone or Copy Vectors When Passing**
  - Use `.clone()` when passing a vector to avoid unintended mutations
  - Use `.copy()` when updating vector values from another vector
  
  ```typescript
  // ✅ DO: Clone vectors when passing to prevent shared references
  const ballPosition = this.ball.getPosition().clone();
  const startPosition = this.ball.getPosition().clone();
  
  // ✅ DO: Use copy for updating vectors
  this.aimArrow.position.copy(arrowPosition);
  
  // ❌ DON'T: Directly assign vectors without cloning
  const position = this.ball.getPosition(); // Risks mutation of original
  
  // ❌ DON'T: Modify vectors that might be referenced elsewhere
  const ballPos = this.ball.getPosition();
  ballPos.x += 1; // This modifies the source vector!
  ```

- **Vector Calculations Best Practices**
  - Chain vector operations for readability
  - Use appropriate vector methods like `add()`, `multiplyScalar()`, etc.
  - Create new vectors with `new THREE.Vector3()` when needed
  
  ```typescript
  // ✅ DO: Chain operations clearly
  const point = startPosition.clone().add(direction.clone().multiplyScalar(t));
  
  // ✅ DO: Use appropriate vector construction
  const direction = new THREE.Vector3(
    Math.sin(angle),
    0,
    Math.cos(angle)
  ).normalize();
  
  // ❌ DON'T: Perform manual component operations when vector methods exist
  direction.x = Math.sin(angle);
  direction.z = Math.cos(angle);
  direction.normalize();
  ```

- **Normalization After Direction Changes**
  - Always normalize direction vectors after modifying components
  - Ensure unit length for direction vectors used in calculations
  
  ```typescript
  // ✅ DO: Normalize after setting components
  const direction = new THREE.Vector3(
    Math.sin(angle),
    0,
    Math.cos(angle)
  ).normalize();
  
  // ❌ DON'T: Forget to normalize direction vectors
  const direction = new THREE.Vector3(Math.sin(angle), 0, Math.cos(angle));
  // Missing normalize() can lead to inconsistent behavior
  ```

- **Vector Memory Management**
  - Create reusable vector instances for frequent calculations
  - Avoid excessive vector creation in update loops
  
  ```typescript
  // ✅ DO: Create reusable vectors as class properties
  private tempVector = new THREE.Vector3();
  
  // In update method:
  this.tempVector.copy(basePosition).add(offset);
  
  // ❌ DON'T: Create new vectors in frequently called methods
  update() {
    // Bad: Creates new vectors every frame
    const temp = new THREE.Vector3();
  }
  ```
