---
description:
globs:
alwaysApply: false
---
# Three.js and Rapier3D Integration

- **Maintain Consistent Coordinate Systems**
  - Ensure Three.js and Rapier3D use the same coordinate system orientation
  - Create utility functions to convert between physics and rendering coordinates when needed
  
  ```typescript
  // ✅ DO: Use consistent coordinate systems and scaling
  const meshPosition = new THREE.Vector3();
  meshPosition.copy(physicsBody.translation() as unknown as THREE.Vector3);
  
  // ❌ DON'T: Mix different coordinate systems without conversion
  mesh.position.x = physicsBody.translation().x;
  // Wrong: might need conversion depending on coordinate system differences
  ```

- **Synchronize Visual and Physics Objects**
  - Use a consistent update pattern in the game loop
  - Update physics simulation first, then visual representation
  
  ```typescript
  // ✅ DO: Update physics first, then sync visuals
  world.step();
  gameObjects.forEach(obj => {
    if (obj.body && obj.mesh) {
      obj.mesh.position.copy(obj.body.translation() as unknown as THREE.Vector3);
      obj.mesh.quaternion.copy(obj.body.rotation() as unknown as THREE.Quaternion);
    }
  });
  
  // ❌ DON'T: Update visuals first or inconsistently
  gameObjects.forEach(obj => obj.mesh.position.set(x, y, z)); // Wrong: not synced with physics
  world.step();
  ```

- **Use Proper Cleanup Methods**
  - Dispose Three.js resources explicitly (geometries, materials, textures)
  - Free Rapier physics resources (bodies, colliders, joints)
  
  ```typescript
  // ✅ DO: Proper cleanup of both Three.js and Rapier resources
  useEffect(() => {
    // Initialize resources...
    
    return () => {
      // Three.js cleanup
      geometry.dispose();
      material.dispose();
      
      // Rapier cleanup
      world.removeRigidBody(body);
      world.removeCollider(collider);
    };
  }, []);
  
  // ❌ DON'T: Forget to clean up either rendering or physics resources
  useEffect(() => {
    // Initialize...
    return () => {
      // Missing physics cleanup - will cause memory leaks
      geometry.dispose();
    };
  }, []);
  ```

- **Scale Physics Parameters Appropriately**
  - Use consistent units between rendering and physics
  - Consider the scale of the game world when setting physics parameters
  
  ```typescript
  // ✅ DO: Use appropriate scales for game world size
  const WORLD_SCALE = 0.1; // If using smaller scale for better physics precision
  
  // Create physics body at scaled position
  const position = new Vector3(
    mesh.position.x * WORLD_SCALE,
    mesh.position.y * WORLD_SCALE,
    mesh.position.z * WORLD_SCALE
  );
  
  // ❌ DON'T: Mix different scales inconsistently
  const body = world.createRigidBody(rigidBodyDesc);
  // Wrong: Not considering potential scale differences between systems
  mesh.position.copy(body.translation());
  ```
