---
description: 
globs: 
alwaysApply: true
---
description: Properly handle asynchronous functions that return cleanup functions
globs: src//.tsx, src//.ts
alwaysApply: true

Always await cleanup functions from async initialization
When an async function returns a cleanup function, store the Promise result and properly await it
Use useEffect with proper Promise handling when working with async functions

  // ❌ DON'T: Call cleanup directly from Promise
  useEffect(() => {
    const cleanup = initializeGame(container);
    return () => {
      cleanup(); // Error: Type 'Promise<() => void>' has no call signatures
    };
  }, []);
  
  // ✅ DO: Properly handle the Promise and store cleanup function
  useEffect(() => {
    let cleanupFn: (() => void) | undefined;
    
    const setup = async () => {
      cleanupFn = await initializeGame(container);
    };
    
    setup();
    
    return () => {
      if (cleanupFn) cleanupFn();
    };
  }, []);