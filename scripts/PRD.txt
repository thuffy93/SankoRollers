
# Enhanced Project Requirements Document: Cosmic Rollers

## Game Overview
Cosmic Rollers is a physics-based golf game deeply inspired by Kirby's Dream Course, providing an engaging 3D isometric experience where players control a ball, navigating through procedurally generated courses to hit targets and reach goals in as few shots as possible.

## Core Design Principles
- **Fidelity to Original Mechanics**: Accurately recreate the physics feel of Kirby's Dream Course
- **Modular Architecture**: Implement clean separation between game systems
- **Progressive Enhancement**: Build core systems first, then layer complexity
- **Procedural Generation**: Use noise-based algorithms for course variety
- **Performance First**: Maintain 60fps on mid-tier devices

## Game Structure

### System Architecture
```
Game
├── Core
│   ├── GameManager: Central controller for game state and systems
│   ├── AssetManager: Handles resource loading and caching
│   ├── InputManager: Processes and normalizes player input
│   └── SceneManager: Controls level loading and transitions
├── Physics
│   ├── PhysicsWorld: Encapsulates Rapier world and parameters
│   ├── CollisionManager: Handles collision callbacks and events
│   └── PhysicsDebugger: Visual debugging for physics bodies
├── Rendering
│   ├── SceneRenderer: Main Three.js scene handling
│   ├── CameraController: Manages isometric camera behavior
│   ├── EffectsManager: Particle systems and visual feedback
│   └── UIRenderer: Handles in-game interface elements
├── Gameplay
│   ├── ShotController: Implements shot mechanics and power system
│   ├── CourseManager: Loads/generates and tracks course state
│   ├── EntityManager: Tracks all game objects and their states
│   └── ScoreManager: Tracks player progress and statistics
└── Procedural
    ├── NoiseGenerator: Perlin/Simplex noise generation
    ├── TerrainGenerator: Creates course terrain from noise maps
    ├── ObstacleGenerator: Places obstacles based on terrain
    └── CourseValidator: Ensures generated courses are playable
```

### Entity Hierarchy
```
Entity (Base class with position, rotation, update method)
├── Ball: Player-controlled ball with physics properties
├── Terrain: Course surfaces with collision
│   ├── FlatTerrain: Basic flat surfaces
│   ├── SlopedTerrain: Inclined surfaces affecting ball physics
│   └── HazardTerrain: Special areas like water or sand
├── Target: Enemies/objects that react to ball collision
│   ├── BasicTarget: Simple target that disappears on hit
│   ├── MovingTarget: Target that follows a predetermined path
│   └── BossTarget: Special target requiring multiple hits
├── Obstacle: Objects affecting ball movement
│   ├── Wall: Blocks ball movement
│   ├── Bumper: Bounces the ball with increased restitution
│   └── Booster: Provides additional momentum in a direction
└── Goal: Final target that completes the level
```

## Detailed Feature Specifications

### 1. Physics-Based Ball Movement

#### Core Physics Properties
- **Ball Properties**:
  - Mass: 1.0 (adjustable per testing)
  - Radius: 0.2 units
  - Restitution: 0.7 for realistic bounces
  - Friction: 0.2 for smooth rolling
  - Linear Damping: 0.5 to gradually slow down
  - Angular Damping: 0.2 for realistic rotation
  - CCD Enabled: true for fast-moving collisions

- **Implementation with Rapier**:
```typescript
class Ball {
  constructor(world: RAPIER.World, scene: THREE.Scene, position: THREE.Vector3) {
    // Rigid body with ball collider
    this.rigidBody = world.createRigidBody(
      RAPIER.RigidBodyDesc.dynamic()
        .setTranslation(position.x, position.y, position.z)
        .setLinearDamping(0.5)
        .setAngularDamping(0.2)
        .setCcdEnabled(true)
    );
    
    // Create ball collider with appropriate physics properties
    this.collider = world.createCollider(
      RAPIER.ColliderDesc.ball(0.2)
        .setRestitution(0.7)
        .setFriction(0.2),
      this.rigidBody
    );
    
    // Create visual representation
    this.mesh = new THREE.Mesh(
      new THREE.SphereGeometry(0.2, 32, 32),
      new THREE.MeshStandardMaterial({ color: 0xff69b4 })
    );
    scene.add(this.mesh);
  }
  
  update() {
    // Sync mesh with physics position and rotation
    const position = this.rigidBody.translation();
    this.mesh.position.set(position.x, position.y, position.z);
    
    const rotation = this.rigidBody.rotation();
    this.mesh.quaternion.set(rotation.x, rotation.y, rotation.z, rotation.w);
    
    // Update helper properties
    const velocity = this.rigidBody.linvel();
    this.isMoving = velocity.length() > 0.05;
  }
}
```

### 2. Shot Control System

#### Two-Phase Input System
Based directly on Kirby's Dream Course mechanics:

- **Aiming Phase**:
  - Direction indicator showing intended path (THREE.ArrowHelper)
  - Left/right controls to adjust aim angle
  - Hold modifier button to apply spin (left/right bend)
  - Up/down to switch between ground (rolling) and fly (bouncing) shots

- **Power Phase**:
  - Visual meter filling from 0-100%
  - Precise timing for "Super Shot" at exactly 100% power
  - Power directly correlates to impulse magnitude
  - Visual feedback showing projected path based on power/angle

- **Shot Types**:
  - **Grounder**: Ball rolls along surface, follows terrain
  - **Fly Shot**: Ball bounces along path, affected by gravity
    - Natural Shot: Standard bounce path
    - Top Spin: Increased distance, forward momentum
    - Back Spin: Decreased distance, can reverse direction

- **Implementation**:
```typescript
class ShotController {
  constructor(ball: Ball, camera: THREE.Camera, scene: THREE.Scene) {
    this.ball = ball;
    this.camera = camera;
    this.scene = scene;
    
    // Create aiming arrow
    this.aimArrow = new THREE.ArrowHelper(
      new THREE.Vector3(1, 0, 0),
      new THREE.Vector3(0, 0, 0),
      3,
      0xff0000
    );
    scene.add(this.aimArrow);
    
    // Create power meter UI
    this.powerMeter = new PowerMeter();
    
    this.shotType = ShotType.GROUNDER;
    this.spinType = SpinType.NONE;
    this.angle = 0;
    this.power = 0;
    this.isAiming = false;
    this.isPowerPhase = false;
  }
  
  startAiming() {
    if (this.ball.isMoving) return;
    
    this.isAiming = true;
    this.updateAimingVisuals();
  }
  
  updateAim(deltaAngle) {
    if (!this.isAiming) return;
    
    this.angle += deltaAngle;
    this.updateAimingVisuals();
  }
  
  setSpin(spinType) {
    this.spinType = spinType;
    this.updateAimingVisuals();
  }
  
  setShotType(shotType) {
    this.shotType = shotType;
    this.updateAimingVisuals();
  }
  
  startPowerPhase() {
    if (!this.isAiming) return;
    
    this.isAiming = false;
    this.isPowerPhase = true;
    this.power = 0;
    this.powerMeter.show();
  }
  
  updatePower(deltaTime) {
    if (!this.isPowerPhase) return;
    
    // Increment power (0-1 range)
    this.power = Math.min(this.power + deltaTime * this.POWER_RATE, 1.0);
    this.powerMeter.updateValue(this.power);
  }
  
  executeShot() {
    if (!this.isPowerPhase) return;
    
    this.isPowerPhase = false;
    this.powerMeter.hide();
    
    // Calculate shot force based on power, angle and spin
    const isSuperShot = Math.abs(this.power - 1.0) < 0.02; // Within 2% of max
    const force = this.calculateShotForce(isSuperShot);
    
    // Apply impulse to ball
    this.ball.applyImpulse(force);
    
    // Apply spin if needed
    if (this.spinType !== SpinType.NONE) {
      const torque = this.calculateSpinTorque();
      this.ball.applyTorque(torque);
    }
  }
  
  private updateAimingVisuals() {
    // Update arrow direction based on angle and spin
    const direction = new THREE.Vector3(
      Math.cos(this.angle),
      0,
      Math.sin(this.angle)
    );
    
    // Apply curve to direction if spin is applied
    if (this.spinType === SpinType.LEFT) {
      // Curve path visualization to the left
    } else if (this.spinType === SpinType.RIGHT) {
      // Curve path visualization to the right
    }
    
    const ballPosition = this.ball.getPosition();
    this.aimArrow.position.copy(ballPosition);
    this.aimArrow.setDirection(direction.normalize());
    
    // Update arrow color based on shot type
    const color = this.shotType === ShotType.GROUNDER ? 0x00ff00 : 0x0000ff;
    this.aimArrow.setColor(color);
  }
}
```

### 3. Procedural Course Generation

#### Noise-Based Terrain Generation
- **Noise Algorithm**: Multi-octave Simplex noise for natural terrain variation
- **Heightmap Generation**:
  - Grid-based heightmap (e.g., 32x32 resolution)
  - Adjustable amplitude/frequency for terrain variation
  - Edge dampening to ensure playable boundaries
- **Terrain Types**:
  - Flat areas for spawn points, targets and goals
  - Rolling hills for dynamic movement
  - Steep slopes for challenging shots
  - Plateaus for strategic positioning

- **Implementation**:
```typescript
class TerrainGenerator {
  constructor(seed = Math.random() * 10000) {
    this.noise = new SimplexNoise(seed);
    this.resolution = 32; // Grid resolution
    this.size = 20;       // World units
  }
  
  generate(options = {}) {
    const {
      octaves = 4,
      persistence = 0.5,
      lacunarity = 2.0,
      amplitude = 1.5,
      frequency = 1.0,
      flatAreas = []      // Areas to keep relatively flat
    } = options;
    
    // Create heightmap grid
    const heightmap = new Float32Array(this.resolution * this.resolution);
    
    // Generate multi-octave noise
    for (let y = 0; y < this.resolution; y++) {
      for (let x = 0; x < this.resolution; x++) {
        // Convert to normalized coordinates
        const nx = x / this.resolution - 0.5;
        const ny = y / this.resolution - 0.5;
        
        // Start with zero height
        let height = 0;
        let freq = frequency;
        let amp = amplitude;
        
        // Sum multiple octaves
        for (let i = 0; i < octaves; i++) {
          height += this.noise.noise2D(nx * freq, ny * freq) * amp;
          freq *= lacunarity;
          amp *= persistence;
        }
        
        // Apply edge dampening (smooth fall-off at edges)
        const distanceFromCenter = Math.sqrt(nx*nx + ny*ny) * 2;
        const edgeFactor = 1 - Math.min(1, Math.max(0, distanceFromCenter - 0.6) * 2.5);
        height *= edgeFactor;
        
        // Flatten designated areas
        for (const area of flatAreas) {
          const dx = nx - area.x;
          const dy = ny - area.y;
          const distSq = dx*dx + dy*dy;
          if (distSq < area.radius * area.radius) {
            const flattenFactor = 1 - Math.min(1, 
              (area.radius - Math.sqrt(distSq)) / area.radius);
            height *= flattenFactor;
          }
        }
        
        // Store in heightmap
        heightmap[y * this.resolution + x] = height;
      }
    }
    
    return {
      heightmap,
      resolution: this.resolution,
      size: this.size
    };
  }
  
  createThreeMesh(heightmapData) {
    // Create geometry from heightmap
    const geometry = new THREE.PlaneGeometry(
      heightmapData.size, 
      heightmapData.size,
      heightmapData.resolution - 1,
      heightmapData.resolution - 1
    );
    
    // Apply heightmap to vertices
    const vertices = geometry.attributes.position.array;
    for (let i = 0; i < vertices.length / 3; i++) {
      const x = Math.floor(i % heightmapData.resolution);
      const y = Math.floor(i / heightmapData.resolution);
      const height = heightmapData.heightmap[y * heightmapData.resolution + x];
      vertices[i * 3 + 2] = height; // Apply to z-coordinate
    }
    
    // Update normals
    geometry.computeVertexNormals();
    
    // Create mesh
    const material = new THREE.MeshStandardMaterial({
      color: 0x88cc88,
      flatShading: false,
      wireframe: false
    });
    
    const mesh = new THREE.Mesh(geometry, material);
    mesh.rotation.x = -Math.PI / 2; // Rotate to horizontal
    
    return mesh;
  }
  
  createRapierCollider(world, heightmapData) {
    // Create Rapier heightfield collider
    const heightfield = new RAPIER.Heightfield(
      heightmapData.resolution - 1,
      heightmapData.resolution - 1,
      heightmapData.heightmap,
      { x: heightmapData.size, y: 1, z: heightmapData.size }
    );
    
    const colliderDesc = RAPIER.ColliderDesc
      .heightfield(
        heightmapData.resolution - 1,
        heightmapData.resolution - 1,
        new Float32Array(heightmapData.heightmap),
        { x: heightmapData.size, y: 1, z: heightmapData.size }
      )
      .setFriction(0.8);
    
    const body = world.createRigidBody(RAPIER.RigidBodyDesc.fixed());
    const collider = world.createCollider(colliderDesc, body);
    
    return { body, collider };
  }
}
```

#### Obstacle and Target Placement
- **Algorithm**: Constraint-based generation using terrain analysis
- **Placement Rules**:
  - Targets on flat or gently sloped areas
  - Obstacles near key paths and choke points
  - Edge barriers to prevent falling off in certain areas
  - Goal placed in challenging but reachable location
  
- **Course Validation**:
  - Pathfinding to verify course is completable
  - Adjust placement if validation fails
  - Calculate difficulty rating based on terrain complexity

### 4. Isometric Camera System

- **Camera Configuration**:
  - Fixed 45° isometric angle for classic feel
  - Dynamic follow behavior with smoothing
  - Height adjustment based on terrain elevation
  - Zoom levels for different shot types

- **Implementation**:
```typescript
class IsometricCameraController {
  constructor(camera, target) {
    this.camera = camera;
    this.target = target;
    
    // Camera properties
    this.distance = 10;
    this.height = 8;
    this.angle = Math.PI / 4; // 45 degrees
    this.damping = 0.1;
    
    // Current states
    this.currentPosition = new THREE.Vector3();
    this.targetPosition = new THREE.Vector3();
    
    // Initialize camera
    this.updateCameraPosition();
  }
  
  update(deltaTime) {
    // Get target's current position
    const targetPos = this.target.getPosition();
    
    // Update target position with offset
    this.targetPosition.set(
      targetPos.x,
      targetPos.y + this.height,
      targetPos.z
    );
    
    // Smoothly interpolate current position
    this.currentPosition.lerp(this.targetPosition, this.damping);
    
    // Calculate camera position based on isometric angle
    const cameraOffset = new THREE.Vector3(
      Math.sin(this.angle) * this.distance,
      this.height,
      Math.cos(this.angle) * this.distance
    );
    
    // Position camera and look at target
    this.camera.position.copy(this.currentPosition).add(cameraOffset);
    this.camera.lookAt(this.currentPosition);
  }
  
  setHeight(height) {
    this.height = height;
  }
  
  setDistance(distance) {
    this.distance = distance;
  }
  
  setAngle(angle) {
    this.angle = angle;
  }
  
  zoomIn() {
    this.distance = Math.max(5, this.distance - 1);
  }
  
  zoomOut() {
    this.distance = Math.min(15, this.distance + 1);
  }
}
```

## Development Phases

### Phase 1: Core Mechanics (Weeks 1-3)
- **Week 1: Project Setup & Core Systems**
  - Initialize Three.js and Rapier
  - Set up basic scene and rendering pipeline
  - Configure physics world and parameters
  - Implement asset loading system
  - Create game loop structure

- **Week 2: Ball Physics & Movement**
  - Implement ball rigid body with colliders
  - Create basic terrain with colliders
  - Develop camera follow behavior
  - Add debug visualization for physics

- **Week 3: Basic Shot System**
  - Create aiming mechanism with direction indicator
  - Implement power meter and shot execution
  - Add grounder shot type
  - Develop simple UI for shot display

**Milestone 1 Deliverable**: Playable prototype with:
- Ball that can be aimed and launched
- Simple flat terrain with physics interaction
- Following camera with isometric perspective
- Debug visualizations for physics

### Phase 2: Core Gameplay (Weeks 4-7)
- **Week 4: Complete Shot System**
  - Add fly shot type with bounce physics
  - Implement spin controls (left/right)
  - Add top/back spin for fly shots
  - Create visual trajectory prediction

- **Week 5: Target System**
  - Implement basic target entity
  - Create collision detection for targets
  - Add visual feedback for target hits
  - Develop win condition when all targets are hit

- **Week 6: Course Features**
  - Add sloped terrain with proper physics
  - Implement bumpers with high restitution
  - Create water/sand hazards with physics effects
  - Add walls and boundaries

- **Week 7: Goal System & Game Flow**
  - Implement goal hole with detection
  - Add level completion logic
  - Create simple level transition
  - Implement score tracking

**Milestone 2 Deliverable**: Functional game loop with:
- Complete shot system with all shot types
- Working targets and goal
- Various terrain types with appropriate physics
- Basic game flow from level to level

### Phase 3: Procedural Generation (Weeks 8-10)
- **Week 8: Noise Generation System**
  - Implement Simplex noise generator
  - Create heightmap generation from noise
  - Develop parameter tuning system
  - Add terrain visualization tools

- **Week 9: Terrain Generation**
  - Create terrain mesh from heightmap
  - Implement Rapier collider from heightmap
  - Add terrain material system
  - Develop terrain modification tools

- **Week 10: Object Placement**
  - Create algorithm for target placement
  - Implement obstacle positioning system
  - Add goal placement logic
  - Develop course validation system

**Milestone 3 Deliverable**: Procedural course generation with:
- Dynamic terrain from noise parameters
- Intelligent placement of targets and obstacles
- Course validation ensuring playability
- Editor tools for manual adjustments

### Phase 4: Polish & Refinement (Weeks 11-12)
- **Week 11: Visual Enhancement**
  - Add particle effects for hits and goals
  - Implement material improvements
  - Add lighting effects
  - Create smooth animations for game objects

- **Week 12: UI & UX**
  - Implement full game UI
  - Add menu system
  - Create tutorial/help system
  - Polish camera behavior and transitions

**Final Deliverable**: Complete game with:
- Polished visuals and effects
- Intuitive UI and controls
- Procedurally generated levels with varying difficulty
- Smooth game flow from start to finish

## Technical Considerations

### Performance Optimization
- Use instanced rendering for repeated elements
- Implement object pooling for particles and effects
- Enable Rapier's sleeping bodies for inactive objects
- Use simplified colliders for physics where possible
- Implement LOD (Level of Detail) for complex objects

### Testing Strategy
- **Unit Tests**: For core systems and algorithms
- **Physics Tests**: Validate expected behavior of collisions
- **Procedural Testing**: Automated validation of generated courses
- **Performance Benchmarks**: Ensure 60fps on target devices
- **Playtest Protocol**: Structured feedback collection

### Code Architecture Principles
- **Entity-Component System**: For flexible game object composition
- **Event-Driven Communication**: To reduce tight coupling
- **State Management**: Clear state transitions and persistence
- **Lazy Initialization**: Load resources only when needed
- **Defensive Programming**: Validate inputs and handle edge cases

This enhanced PRD provides a comprehensive roadmap for developing Cosmic Rollers with a focus on recreating the physics and mechanics of Kirby's Dream Course while adding procedural generation capabilities. The phased approach ensures a solid foundation of core mechanics before adding complexity, with clear milestones to track progress.
