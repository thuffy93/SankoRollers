ECS SankoRollers

Here’s the project structure for *Cosmic Rollers*, designed with an Entity-Component-System (ECS) architecture to ensure separation of concerns. ECS divides the game into entities (objects), components (data), and systems (behavior), promoting modularity, maintainability, and scalability. This structure integrates with Three.js for rendering, Rapier for physics, and React for the user interface.

---

### Project Structure

```
src/
├── GameEngine/
│   ├── ECS/
│   │   ├── Entity.js         # Defines entity class to hold components
│   │   ├── System.js         # Base class for all systems
│   │   └── World.js          # Manages entities, systems, and game state
│   ├── Components/
│   │   ├── Transform.js      # Position, rotation, scale
│   │   ├── Physics.js        # Physics properties (velocity, mass)
│   │   ├── Renderer.js       # Three.js mesh and material data
│   │   ├── Collider.js       # Collision shape and properties
│   │   ├── PowerUp.js        # Power-up type and effects
│   │   ├── Obstacle.js       # Obstacle type and properties
│   │   ├── Course.js         # Course layout data
│   │   ├── PlayerInput.js    # Player input states (e.g., charge)
│   │   ├── Score.js          # Stroke count and points
│   │   └── VisualStyle.js    # Visual style settings
│   └── Systems/
│       ├── PhysicsSystem.js  # Updates physics with Rapier
│       ├── InputSystem.js    # Processes player inputs
│       ├── PowerUpSystem.js  # Applies power-up effects
│       ├── CourseGenerationSystem.js  # Generates procedural courses
│       ├── RenderingSystem.js # Updates Three.js rendering
│       ├── CollisionSystem.js # Handles collision detection
│       ├── UISystem.js       # Updates UI state for React
│       └── AnimationSystem.js # Manages animations and effects
├── UI/
│   ├── App.jsx               # Root React component
│   ├── GameCanvas.jsx        # Renders Three.js canvas and captures inputs
│   ├── HUD.jsx               # Displays score and power-ups
│   ├── Menu.jsx              # Main menu and settings
│   └── UIContext.js          # Provides UI state to React components
├── Utils/
│   ├── rng.js                # Random number generation utilities
│   └── physicsSync.js        # Physics synchronization helpers
└── Blockchain/               # Optional blockchain integration
    ├── useArcadePool.js      # Hook for arcade pool entries
    ├── useNFTMint.js         # Hook for NFT minting
    └── useVersusMatch.js     # Hook for multiplayer matches
```

---

### Core Concepts

#### **ECS Architecture**
- **Entities**: Simple objects (e.g., the ball, obstacles) represented as IDs with attached components. Defined in `Entity.js`.
- **Components**: Pure data containers (e.g., `Transform`, `Physics`) stored in `Components/`. They hold the state of entities without logic.
- **Systems**: Logic modules (e.g., `PhysicsSystem`, `RenderingSystem`) in `Systems/`. Each system processes entities with specific components, enforcing separation of concerns.
- **World**: The `World.js` file ties everything together, managing entities, systems, and external resources like the Three.js scene and Rapier physics world.

#### **Key Integrations**
- **Rendering**: The `RenderingSystem` updates Three.js meshes based on `Transform` and `Renderer` components. The Three.js scene is managed by `World`.
- **Physics**: The `PhysicsSystem` uses Rapier to simulate physics, syncing entity positions with `Transform` components.
- **UI**: React handles the user interface in `UI/`. The `UISystem` bridges game state (e.g., score) to a React-compatible state via `UIContext`.

#### **Input and State Management**
- **Input**: Captured in `GameCanvas.jsx` (e.g., keyboard/mouse events) and stored in an `inputState` object, which the `InputSystem` uses to update `PlayerInput` components.
- **UI State**: The `UISystem` collects data from entities (e.g., `Score`) and updates a shared state for React components to display.

---

### Directory Breakdown

#### **`GameEngine/`**
- **`ECS/`**: Core ECS framework files.
  - `Entity.js`: Defines the `Entity` class to manage components.
  - `System.js`: Provides a base class for systems with an `update` method and component requirements.
  - `World.js`: Orchestrates the game loop, entity management, and holds the Three.js scene and Rapier world.
- **`Components/`**: Data definitions for game objects.
  - Examples: `Transform.js` (position), `Renderer.js` (Three.js mesh), `PlayerInput.js` (input data).
- **`Systems/`**: Logic implementations.
  - Examples: `PhysicsSystem.js` (Rapier updates), `RenderingSystem.js` (Three.js updates), `CourseGenerationSystem.js` (procedural generation).

#### **`UI/`**
- React-based user interface.
  - `App.jsx`: Initializes the game, sets up the renderer and camera, and runs the game loop.
  - `GameCanvas.jsx`: Hosts the Three.js canvas and captures input events.
  - `HUD.jsx`: Displays real-time game info (e.g., score).
  - `UIContext.js`: Shares UI state across components.

#### **`Utils/`**
- Helper functions.
  - `rng.js`: Random number generation for procedural elements.
  - `physicsSync.js`: Utilities for syncing physics and rendering.

#### **`Blockchain/`**
- Optional blockchain features (not ECS-focused).
  - Includes hooks for arcade pools, NFT minting, and multiplayer matches.

---

### How It Works Together

1. **Game Loop**:
   - Defined in `App.jsx` using `requestAnimationFrame`.
   - Calls `World.update(delta)` to process all systems, then renders the scene with Three.js.

2. **Entity Creation**:
   - Systems like `CourseGenerationSystem` create entities (e.g., terrain, obstacles) with components like `Transform`, `Renderer`, and `Collider`.

3. **System Processing**:
   - Each system updates entities with required components:
     - `PhysicsSystem`: Steps Rapier physics and updates `Transform`.
     - `RenderingSystem`: Syncs Three.js meshes with `Transform`.
     - `UISystem`: Updates UI state for React.

4. **Input and UI**:
   - `GameCanvas.jsx` updates `inputState` based on events.
   - `InputSystem` processes `inputState` to update `PlayerInput`.
   - `UISystem` pushes game state to React via `setUIState`.

---

This ECS-based structure ensures that *Cosmic Rollers* separates data (components) from behavior (systems), integrates seamlessly with Three.js and Rapier, and maintains a clean React-based UI, making it both robust and extensible.